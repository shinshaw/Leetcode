There are two sorted arrays nums1 and nums2 of size m and n respectively.

Find the median of the two sorted arrays. The overall run time complexity should be O(log (m+n)).

Example 1:
nums1 = [1, 3]
nums2 = [2]

The median is 2.0
Example 2:
nums1 = [1, 2]
nums2 = [3, 4]

The median is (2 + 3)/2 = 2.5

//nlog(n) time
	public double findMedianSortedArrays(int[] nums1, int[] nums2) {
        int n1=nums1.length;
		int n2=nums2.length;
        int[] a=new int[n1+n2];
        System.arraycopy(nums1, 0, a, 0, n1);
        System.arraycopy(nums2, 0, a, n1, n2);
        Arrays.sort(a);
        double median=(double)((n1+n2)%2==1?a[(n1+n2)>>1]:(a[(n1+n2-1)>>1]+a[(n1+n2)>>1])/2.0);
        return median;
    }
	//原问题转变成一个寻找第k小数的问题（假设两个原序列升序排列），这样中位数实际上是第(m+n)/2小的数。log(k) time
	public double findMedianSortedArrays2(int[] nums1, int[] nums2){
		int m=nums1.length;
	    int n=nums2.length;
	    if((m+n)%2==0){
	    	return (
	                findKth((m+n)/2,    nums1, 0,  nums2, 0) + 
	                findKth((m+n)/2+1,  nums1, 0, nums2, 0)
	            )/2.0;
	    }else{
	    	return findKth((m+n)/2+1, nums1, 0, nums2, 0);
	    }
	}
	/*
	考虑几个边界条件:
	如果A或者B为空，则直接返回B[k-1]或者A[k-1]；
	如果k为1，我们只需要返回A[0]和B[0]中的较小值；
	如果A[k/2-1]=B[k/2-1]，返回其中一个；
	 */
	public int findKth(int k, int [] A, int aStart, int[] B, int bStart){
		if(aStart>=A.length) return B[bStart+k-1];
		if(bStart>=B.length) return A[aStart+k-1];
		if(k==1) return Math.min(A[aStart],B[bStart]);
		int aMid=aStart+k/2+1;
		int bMid=bStart+k/2+1;
		int aValue = aMid<A.length?A[aMid]:Integer.MAX_VALUE;
		int bValue = bMid<B.length?B[bMid]:Integer.MAX_VALUE;
		if(aValue<bValue){
			return findKth(k-k/2,A,aMid+1,B,bStart);
		}else{
			return findKth(k-k/2, A, aStart, B, bMid+1);
		}
	}
